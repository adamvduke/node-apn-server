// Generated by CoffeeScript 1.3.1
(function() {
  var apnErrorCallback, apns, client, connect, connections, couchdb, createConnections, createNotification, db, dbHost, dbPass, dbPort, dbUser, express, fs, path, resetConnections, start, util;

  apns = require('apn');

  express = require('express');

  connect = require('connect');

  fs = require('fs');

  path = require('path');

  util = require('util');

  couchdb = require('felix-couchdb');

  dbPort = process.env.COUCH_PORT || 5984;

  dbHost = process.env.COUCH_HOST || 'localhost';

  dbUser = process.env.COUCH_USER || null;

  dbPass = process.env.COUCH_PASS || null;

  client = couchdb.createClient(dbPort, dbHost, dbUser, dbPass);

  db = client.db('node_apn');

  apnErrorCallback = function(errorCode, note) {
    return console.log("Push notification error, error code: " + errorCode + " Note: " + (util.inspect(note)));
  };

  createNotification = function(params) {
    var note;
    note = new apns.notification();
    note.device = new apns.device(params.deviceToken);
    note.alert = params.notificationText;
    if (params.payload) {
      note.payload = {
        'info': params.payload
      };
    }
    note.badge = parseInt(params.badgeNumber, 10);
    note.sound = params.sound;
    return note;
  };

  connections = null;

  createConnections = function(result) {
    connections = {};
    return result.rows.forEach(function(row) {
      var user;
      user = row.doc;
      return user.applications.forEach(function(application) {
        var apnsConnection, appId, settings;
        settings = application.settings;
        settings.errorCallback = apnErrorCallback;
        apnsConnection = new apns.connection(settings);
        appId = application.app_id;
        return connections[appId] = apnsConnection;
      });
    });
  };

  start = function() {
    var app, port;
    app = express.createServer(express.logger());
    app.configure(function() {
      app.register('html', require('ejs'));
      app.set('view engine', 'html');
      app.set('views', __dirname + '/../views');
      app.set('view options', {
        layout: "layouts/layout.html"
      });
      app.use(connect.bodyParser());
      app.use(express.methodOverride());
      return app.use(express["static"](__dirname + '/public'));
    });
    app.get('/', function(request, response) {
      return response.render('index');
    });
    app.post('/', function(request, response) {
      var appId, appSecret, connection, note;
      appSecret = request.body.appSecret;
      appId = request.body.appId;
      note = createNotification(request.body);
      connection = connections[appId];
      connection.sendNotification(note);
      return response.redirect("/");
    });
    app.post('/upload', function(request, response) {
      var appId, appSecret, certComplete, certData, certStream, keyComplete, keyData, keyStream;
      appSecret = request.body.appSecret;
      appId = request.body.appId;
      certData = "";
      keyData = "";
      certComplete = false;
      keyComplete = false;
      certStream = fs.createReadStream(request.files.certificate.path);
      certStream.on('data', function(data) {
        return certData = certData + data;
      });
      certStream.on('end', function() {
        certComplete = true;
        console.log("appId: " + appId);
        console.log("appSecret: " + appSecret);
        console.log(certData);
        if (certComplete && keyComplete) {
          return response.redirect("/");
        }
      });
      keyStream = fs.createReadStream(request.files.key.path);
      keyStream.on('data', function(data) {
        return keyData = keyData + data;
      });
      return keyStream.on('end', function() {
        keyComplete = true;
        console.log("appId: " + appId);
        console.log("appSecret: " + appSecret);
        console.log(keyData);
        if (certComplete && keyComplete) {
          return response.redirect("/");
        }
      });
    });
    app.get('/upload', function(request, response) {
      return response.render('upload');
    });
    port = process.env.PORT || 3000;
    return app.listen(port, function() {
      return console.log("Listening on " + port);
    });
  };

  resetConnections = function(db, startServer) {
    return db.allDocs({
      include_docs: true
    }, function(er, result) {
      if (er) {
        throw new Error(JSON.stringify(er));
      }
      createConnections(result);
      if (startServer) {
        return start();
      }
    });
  };

  resetConnections(db, true);

}).call(this);
