{"google":"","name":"Node-apn-server","body":"Purpose:\r\n-----------------\r\n\r\nProvide an http based API that you can send POST requests to and it will send a push notification to apple's notification service.\r\n\r\nPrerequisites\r\n-----------------\r\n\r\n* Install [node](http://nodejs.org/)\r\n* Install [npm](http://npmjs.org/)\r\n* Install [couchdb](http://couchdb.apache.org/)\r\n\r\nGoal Usage:\r\n-----------------\r\n\r\n     node app.js\r\n     curl -d \"appId=<your-app-id>&appSecret=<your-app-secret>&deviceToken=760ff5e341de1ca9209bcfbd320625b047b44f5b394c191899dd5885a1f65bf2&notificationText=What%3F&badgeNumber=4&sound=default&payload=5+and+7\" http://localhost:3000/\r\n\r\nGetting Started:\r\n-----------------\r\n\r\n* Start couchdb\r\n* Create a node_apn database in couch\r\n* Create the pre-requisite data needed to support the server\r\n * Add the couch\\_views/users\\_all.js content as a view called \"\\_design/users\" with the name \"all\"\r\n * Add the couch\\_views/applications\\_secrets.js content as a view called \"\\_design/applications\" with the name \"secrets\"\r\n * Add a user document and configure that user's applications\r\n * There is an example document with one user and one application configured shown below\r\n * Pay attention to the certData and keyData entries in the settings hash, the server currently provides a way for you to upload the certificate and key, but it's ugly. The plan is to possibly use a different front end to manage the things that might be easier to do in a blocking environment.\r\n\r\n--\r\n\r\n     git clone git@github.com:adamvduke/node-apn-server.git\r\n     cd node-apn-server\r\n     npm install\r\n     node app.js\r\n\r\nExample Document:\r\n----------------\r\n\r\n     {\r\n      \"_id\": \"0aead832d8a8e5f57e0c10b5ff000565\",\r\n      \"_rev\": \"11-92625b691c7e8203250de95fea65ada2\",\r\n      \"username\": \"adamvduke\",\r\n      \"password\": \"password\",\r\n      \"type\": \"user\",\r\n      \"applications\": [\r\n       {\r\n        \"app_id\": \"1\",\r\n        \"app_secret\": \"1\",\r\n        \"settings\": {\r\n                     \"certData\": \"Your Cert Data goes here\",\r\n                     \"keyData\": \"Your Key Data goes here\",\r\n                     \"gateway\": \"gateway.push.apple.com\",\r\n                     \"port\": 2195,\r\n                     \"enhanced\": true,\r\n                     \"cacheLength\": 5\r\n                    }\r\n       }\r\n      ]\r\n     }\r\n\r\nSending Notifications:\r\n----------------------\r\n\r\nThere are three required parameters:\r\n\r\n* appId - Your application's appId\r\n* appSecret - Your application's appSecret\r\n* deviceToken - The device token to send the notification to\r\n\r\nOptional parameters are:\r\n\r\n* notificationText - The text that will display on the device.\r\n* badgeNumber - The value of the badge to be set on the application's icon.\r\n* sound - The sound to be played with the notification\r\n* payload - Extra data to included in the notification, formatted as a json dictionary\r\n * Passed in the options dictionary, with the key: info, during -application:didFinishLaunchingWithOptions: \r\n\r\nCertificates:\r\n-----------------\r\n\r\n* Do the dance to get the production push notification certificate from the iOS provisioning portal\r\n* Download and install the certificate into Keychain Access.app\r\n* Export the certificate and private key separately as apns-prod-cert.p12 and apns-prod-key.p12 respectively\r\n* For both exports, you will be asked to specify a password, then asked for your keychain password. Do not specify a password on the first prompt.\r\n* Run the following commands to convert the certificate and private key to .pem format\r\n\r\n--\r\n\r\n    openssl pkcs12 -clcerts -nokeys -out apns-prod-cert.pem -in apns-prod-cert.p12\r\n    openssl pkcs12 -nocerts -out apns-prod-key.pem -in apns-prod-key.p12\r\n\r\nYou will be forced to set a PEM passphrase on the second command, so execute the following command to remove it:\r\n\r\n    openssl rsa -in apns-prod-key.pem -out apns-prod-key-noenc.pem\r\n\r\nSee [this blog entry](http://blog.serverdensity.com/2010/06/05/how-to-renew-your-apple-push-notification-push-ssl-certificate/) for more details on setting up the certificates.\r\n\r\nCredits:\r\n-----------------\r\n\r\n* [node-apn](https://github.com/argon/node-apn) by [Andrew Naylor](https://github.com/argon)\r\n* [node-querystring](https://github.com/visionmedia/node-querystring) by [visionmedia](https://github.com/visionmedia/)\r\n* [How to renew your Apple Push Notification Push SSL Certificate](http://blog.serverdensity.com/2010/06/05/how-to-renew-your-apple-push-notification-push-ssl-certificate/) by [David Mytton](http://blog.serverdensity.com/author/dmytton/) \r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"An http server written in Node.js to send apple push notifications"}